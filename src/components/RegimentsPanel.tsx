import "./RegimentsPanel.css";
import { RegimentTypes } from "../model/Regiment";
import Unit, { blankUnit } from "../types/Unit";
import { RegimentsSetters, RegimentsState } from "../types/state/RegimentsState";
import {v4 as uuidv4} from 'uuid';

const USE_LATEST_PREFIX = "Use Latest";
const NONE = "(none)"

/**
 * Handler for numeric input (regiment counts/combat ability). Parses the input value
 * and, if the input is a valid number, sets that value with the provided function.
 * @param value
 * @param regType The regiment type (inf/cav/art) that the value is being set for.
 * @param setFn Setter function for the given value generated by a React hook.
 */
function handleNumericInput(
        value: string,
        regType: RegimentTypes,
        setFn: (val: number, type: RegimentTypes) => void
): void {
    const result = parseFloat(value);
    if (!isNaN(result)) {
        setFn(result, regType);
    }
}


function handleUnitSelect(
    value: string,
    regType: RegimentTypes,
    unitList: Unit[],
    setFn: (val: Unit, type: RegimentTypes) => void
): void {
    let selectedUnit: Unit | undefined = undefined;
    if (value.startsWith(USE_LATEST_PREFIX))
        selectedUnit = getLatestUnit(unitList, regType);
    else if (value !== NONE)
        selectedUnit = unitList.find(unit => value.startsWith(unit.name));

    if (selectedUnit !== undefined)
        setFn(selectedUnit, regType);
}


function getLatestUnit(unitsList: Unit[], type: RegimentTypes): Unit | undefined {
    const blank: Unit = blankUnit(type);
    const unit = unitsList.reduce((prev, curr) => 
        {return curr.type === type && prev.techLevel < curr.techLevel ? curr : prev}, blank);
    return unit === blank ? undefined : unit
}

//Sub-components start here
const UnitSelector = (
    props: {
        regType: RegimentTypes, 
        units: Unit[], 
        setter: (val: Unit, type: RegimentTypes) => void
    }
): JSX.Element => {
    const options: string[] = props.units.filter(unit => unit.type === props.regType)
                                    .sort((a, b) => b.techLevel - a.techLevel)
                                    .map(unit => `${unit.name} (${unit.techLevel})`);
    options.unshift(options.length === 0 ? NONE : `${USE_LATEST_PREFIX} (${options.at(0)})` );
    return (
        <select 
            className="unit-select" 
            onChange={e => handleUnitSelect(e.target.value, props.regType, props.units, props.setter)}
            disabled={options.at(0) === NONE}>
            {options.map(name => <option key={name}>{name}</option>)}
        </select>
    )
}

const CombatAbilityInput = (
    props: {
        value: number, 
        type: RegimentTypes, 
        setter: (val: number, type: RegimentTypes) => void
    }
): JSX.Element => {
    const id = uuidv4();
    return (
        <div className="combat-ability-input">
            <input id={id}
                type="number" 
                value={props.value}
                min={0}
                step={0.1}
                onChange={e => handleNumericInput(e.target.name, props.type, props.setter)}
            />
            <label htmlFor={id}>%</label>
        </div>
    )
}

const CountInput = (props: {
    value: number, 
    type: RegimentTypes, 
    setter: (val: number, type: RegimentTypes) => void
}
): JSX.Element => {
    return (
        <input 
            type="number" 
            value= {props.value}
            min={0}
            onChange={e => handleNumericInput(e.target.name, props.type, props.setter)}
        />
    )
}

export default function RegimentsPanel(props: {
            state: RegimentsState,
            setters: RegimentsSetters,
            units: Unit[],
        }) {

    return (
        <div className="regiments-panel">
            <span/>
            <h5>Unit:</h5>
            <h5>Regiments:</h5>
            <h5>Combat Ability(%):</h5>

            <span>Infantry:</span>
            <UnitSelector units={props.units} regType={RegimentTypes.INFANTRY} setter={props.setters.setUnit}/>
            <CountInput value={props.state.counts.infantry} type={RegimentTypes.INFANTRY} setter={props.setters.setCount}/>
            <CombatAbilityInput value={props.state.abilities.cavalry} setter={props.setters.setAbility} type={RegimentTypes.CAVALRY}/>

            <span>Cavalry:</span>
            <UnitSelector regType={RegimentTypes.CAVALRY} units={props.units} setter={props.setters.setUnit}/>
            <CountInput value={props.state.counts.infantry} type={RegimentTypes.INFANTRY} setter={props.setters.setCount}/>
            <CombatAbilityInput value={props.state.abilities.cavalry} setter={props.setters.setAbility} type={RegimentTypes.CAVALRY}/>
        </div>
    );
}